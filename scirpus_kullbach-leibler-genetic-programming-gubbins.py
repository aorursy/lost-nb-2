#!/usr/bin/env python
# coding: utf-8

# In[1]:


import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime
from sklearn.preprocessing import StandardScaler
get_ipython().run_line_magic('matplotlib', 'inline')
pd.set_option('display.max_columns', 50)
pd.set_option('display.max_rows', 150)


# In[2]:


def GPClusterI(data):
    return (0.500000*np.tanh((((((-1.0*((data[:,9])))) - (np.where(np.where(data[:,31] > 1.559526, data[:,31], np.where(data[:,28] > 1.559526, data[:,26], data[:,17] ) ) > 1.626111, np.where(data[:,31] <= 0.591399, np.where(data[:,26] > 1.559526, data[:,17], data[:,17] ), data[:,26] ), ((((data[:,13]) * 2.0)) * 2.0) )))) * 2.0)) +
            0.500000*np.tanh(((np.where(data[:,31] <= 1.796968, ((np.where(np.where(data[:,17] <= 1.050093, data[:,13], (10.0) ) <= 1.796968, data[:,31], (10.0) )) - ((((10.0)) * (np.where(data[:,17] <= 1.050093, (((10.0)) * (np.where(data[:,17] <= 1.050093, data[:,13], data[:,17] ))), data[:,17] ))))), (10.0) )) - (data[:,13]))) +
            0.500000*np.tanh(((((((data[:,14]) - (((data[:,12]) * 2.0)))) - (((((np.where(data[:,9] > 1.796968, ((((data[:,9]) * 2.0)) * 2.0), data[:,9] )) * 2.0)) * 2.0)))) - (((((np.where(data[:,31] > 1.796968, data[:,9], ((np.where(data[:,26] > 1.796968, data[:,12], data[:,27] )) * 2.0) )) * 2.0)) * 2.0)))) +
            0.500000*np.tanh(((data[:,0]) + (((((((((data[:,14]) - (data[:,28]))) - (((((data[:,28]) + (data[:,34]))) * 2.0)))) - (np.where(data[:,28] <= 1.886870, ((((((data[:,9]) + (((np.tanh((data[:,13]))) * 2.0)))) * 2.0)) * 2.0), data[:,28] )))) - (data[:,11]))))) +
            0.500000*np.tanh((((((((-1.0*(((((((((((np.where(data[:,26] <= 0.807551, np.where(np.where(data[:,34] > -0.597506, data[:,26], data[:,13] ) <= 0.807551, ((data[:,13]) * 2.0), data[:,26] ), data[:,26] )) + (data[:,9]))/2.0)) * 2.0)) * 2.0)) * 2.0))))) * 2.0)) - (((((data[:,13]) * 2.0)) * 2.0)))) - (data[:,34]))) +
            0.500000*np.tanh(((((((np.where(data[:,28] <= 2.052433, data[:,13], data[:,34] )) - (((((((((((((np.where(data[:,28] <= 2.052433, data[:,13], data[:,28] )) * 2.0)) + (data[:,9]))) * 2.0)) + (np.where(data[:,9] > 2.237560, data[:,31], data[:,34] )))) + (data[:,28]))) * 2.0)))) - (data[:,28]))) * 2.0)) +
            0.500000*np.tanh(((((((((((((data[:,0]) - (np.where(data[:,12] > 0.877848, data[:,12], data[:,13] )))) - (data[:,9]))) - (data[:,27]))) - (((np.where(data[:,27] > 0.877848, data[:,9], data[:,27] )) - (data[:,31]))))) - (data[:,12]))) - (data[:,9]))) +
            0.500000*np.tanh((-1.0*((((((((((np.where(data[:,17] <= 1.005949, np.where(data[:,14] > 1.796968, data[:,17], ((data[:,27]) * 2.0) ), data[:,17] )) * 2.0)) - ((-1.0*((data[:,34])))))) * 2.0)) - ((((((-1.0*((((data[:,9]) - (data[:,17])))))) - (data[:,9]))) - (data[:,13])))))))) +
            0.500000*np.tanh(((((((((np.where(data[:,0] <= 1.626111, data[:,0], data[:,27] )) - (data[:,26]))) - (data[:,34]))) + (((((((np.where(data[:,14] <= 1.796968, ((((data[:,0]) - (data[:,27]))) - (data[:,27])), data[:,26] )) - (data[:,9]))) - (data[:,2]))) - (data[:,0]))))) * 2.0)) +
            0.500000*np.tanh(((((((((((((np.where(data[:,31] > 1.626111, data[:,31], (-1.0*((np.where(data[:,9] <= 0.980693, ((((data[:,27]) * 2.0)) * 2.0), (9.20665931701660156) )))) )) - (data[:,9]))) - (data[:,26]))) - (data[:,2]))) - ((-1.0*((data[:,0])))))) - (data[:,9]))) - (data[:,2]))) +
            0.500000*np.tanh(((((((np.where(data[:,27] > 1.796968, data[:,12], ((data[:,0]) - (((((np.where(data[:,12] > 1.761831, data[:,12], ((data[:,27]) * 2.0) )) * 2.0)) * 2.0))) )) - (data[:,34]))) - (((((((data[:,9]) + (data[:,12]))) * 2.0)) * 2.0)))) - (data[:,9]))) +
            0.500000*np.tanh(((((((((np.where((-1.0*((data[:,24]))) <= -1.667696, data[:,21], ((np.where(((data[:,21]) * 2.0) <= -1.667696, np.where(data[:,21] > 2.052433, data[:,9], data[:,21] ), (((-1.0*((data[:,27])))) * 2.0) )) * 2.0) )) - (data[:,9]))) - (data[:,21]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((((((((((np.where(data[:,0] > 1.964719, data[:,27], data[:,0] )) - (data[:,2]))) - (data[:,9]))) - (data[:,28]))) - (data[:,2]))) - (((data[:,13]) - (data[:,5]))))) - (data[:,9]))) * 2.0)) - (data[:,27]))) - (data[:,9]))) * 2.0)) +
            0.500000*np.tanh(((((((((((np.where(data[:,14] <= 1.796968, (-1.0*((data[:,13]))), np.where(data[:,5] > 1.541672, data[:,31], (11.55150508880615234) ) )) - (np.where(data[:,27] > -0.226713, (((-1.0*((data[:,13])))) + (((data[:,27]) + (data[:,27])))), data[:,26] )))) * 2.0)) * 2.0)) - (data[:,5]))) * 2.0)) +
            0.500000*np.tanh(((np.where(data[:,26] > 1.796968, data[:,26], np.where((-1.0*((((data[:,9]) * (((data[:,14]) - (np.where(data[:,26] > 0.877848, np.where(data[:,14] > 1.796968, np.tanh(((-1.0*((data[:,26]))))), (14.56153774261474609) ), data[:,9] )))))))) > 1.796968, data[:,9], data[:,13] ) )) * ((-1.0*(((13.29021644592285156))))))) +
            0.500000*np.tanh((-1.0*((((((((data[:,9]) + (((((np.where(data[:,17] > 1.559526, data[:,26], data[:,21] )) + (data[:,2]))) + (((((data[:,34]) + (data[:,27]))) + (data[:,26]))))))) + (np.where(data[:,13] > 1.559526, ((data[:,27]) + (data[:,34])), data[:,27] )))) * ((10.02106475830078125))))))) +
            0.500000*np.tanh(((((((((np.where(data[:,0] > 1.559526, data[:,13], data[:,0] )) - (((((data[:,12]) + (data[:,27]))) + ((((((data[:,9]) + (((data[:,11]) + (data[:,9]))))/2.0)) + ((((data[:,9]) + (data[:,1]))/2.0)))))))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((data[:,31]) - (((np.where(data[:,17] <= 1.626111, np.where(data[:,31] <= 1.626111, ((np.where(data[:,0] <= 1.626111, ((data[:,5]) - (((((data[:,0]) - (np.where(data[:,27] <= 1.626111, data[:,13], data[:,31] )))) - (data[:,13])))), data[:,17] )) * 2.0), data[:,5] ), data[:,17] )) * 2.0)))) +
            0.500000*np.tanh(((((((((((((((data[:,0]) * 2.0)) - (((((data[:,27]) + (((np.where(data[:,27] > 0.227700, ((data[:,9]) + (data[:,1])), data[:,27] )) + (data[:,9]))))) * 2.0)))) - (data[:,2]))) - (data[:,2]))) - (data[:,26]))) - (data[:,16]))) - (data[:,2]))) +
            0.500000*np.tanh(((((((((((((((data[:,0]) - (((data[:,2]) + (((((data[:,2]) + (((data[:,9]) + (data[:,13]))))) + (data[:,27]))))))) - (np.where(data[:,3] <= 2.052433, data[:,21], data[:,3] )))) - (data[:,2]))) * 2.0)) - (data[:,2]))) - (data[:,2]))) * 2.0)) +
            0.500000*np.tanh(((((((((np.where(data[:,27] > -0.153592, data[:,31], ((data[:,1]) - (data[:,12])) )) - (np.where(data[:,1] <= -0.186395, data[:,5], data[:,13] )))) * 2.0)) - (((data[:,2]) + (((((data[:,1]) + (((data[:,13]) + (data[:,13]))))) + (data[:,12]))))))) * 2.0)) +
            0.500000*np.tanh(((((((((np.where(data[:,13] > 1.626111, data[:,13], data[:,7] )) - (data[:,2]))) - (np.where(data[:,1] <= 1.559526, data[:,34], data[:,13] )))) - (((data[:,13]) + (data[:,9]))))) - (np.where(data[:,1] > 1.072624, data[:,13], data[:,12] )))) +
            0.500000*np.tanh(((((((((((((np.where(data[:,1] <= -0.186395, ((((((data[:,31]) - (data[:,1]))) - (data[:,5]))) - (data[:,1])), (-1.0*((data[:,27]))) )) - (data[:,27]))) - (data[:,2]))) - (((data[:,16]) * (data[:,16]))))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh((((((((-1.0*((np.where(data[:,29] <= -0.101818, data[:,26], np.where(data[:,9] <= 2.052433, np.where(data[:,26] > 0.877848, data[:,30], ((((((data[:,13]) * 2.0)) * 2.0)) * 2.0) ), data[:,13] ) ))))) - (data[:,9]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((data[:,35]) * ((13.58155727386474609)))) - (((np.where(data[:,1] <= 0.686716, data[:,34], data[:,13] )) + (np.where(data[:,11] <= 0.686716, data[:,30], data[:,35] )))))) - (np.where(data[:,12] <= 0.686716, ((data[:,13]) + (data[:,35])), data[:,12] )))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((data[:,17]) - (((((np.where(data[:,3] <= 1.626111, data[:,2], ((np.where(data[:,3] <= 1.626111, data[:,2], data[:,17] )) * 2.0) )) * (data[:,17]))) + (((((((data[:,27]) + (data[:,2]))) + (data[:,2]))) * 2.0)))))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(np.where(((data[:,9]) + (((data[:,27]) + (data[:,1])))) <= 0.906706, (-1.0*((((((data[:,26]) + (((data[:,9]) + (data[:,30]))))) + (((((data[:,9]) + (((data[:,26]) + (data[:,27]))))) + (data[:,26]))))))), (-1.0*(((10.0)))) )) +
            0.500000*np.tanh(((np.where((-1.0*((data[:,28]))) <= 1.792143, (12.23836421966552734), ((data[:,13]) * 2.0) )) * ((((((12.23836421966552734)) * (data[:,35]))) - (((data[:,2]) + (np.where(data[:,29] > 0.147088, ((data[:,13]) * 2.0), data[:,28] )))))))) +
            0.500000*np.tanh(np.where(data[:,14] > 1.626111, data[:,14], ((((((np.where(data[:,27] > -0.597506, np.where(data[:,0] > 1.626111, data[:,21], ((((data[:,0]) - (data[:,21]))) + (((((data[:,0]) - (data[:,2]))) - (data[:,13])))) ), data[:,21] )) - (data[:,2]))) - (data[:,13]))) - (data[:,2])) )) +
            0.500000*np.tanh(((((((((((np.where(data[:,0] <= 1.964719, ((data[:,0]) - (data[:,9])), data[:,21] )) - ((-1.0*((np.where(data[:,2] <= 1.626111, data[:,6], data[:,9] ))))))) - (data[:,9]))) - (data[:,2]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh((((-1.0*((np.where((-1.0*((data[:,16]))) <= 1.014400, np.where(np.where(((((data[:,16]) - (data[:,16]))) - (data[:,16])) > 0.383405, data[:,34], data[:,34] ) <= 1.949028, data[:,16], data[:,34] ), (4.29090976715087891) ))))) - (np.where((-1.0*((data[:,34]))) > 0.383405, ((data[:,34]) * 2.0), data[:,13] )))) +
            0.500000*np.tanh(((((((((((((((data[:,35]) * ((10.0)))) * 2.0)) * 2.0)) - (np.where(data[:,35] > 1.796968, data[:,17], np.where(((data[:,17]) * 2.0) > 1.796968, np.where(data[:,17] > 1.796968, (6.75820970535278320), data[:,3] ), data[:,16] ) )))) * 2.0)) * 2.0)) - (np.where(data[:,35] > 1.796968, data[:,35], data[:,27] )))) +
            0.500000*np.tanh(((((np.where(data[:,5] <= 1.368713, np.where(((np.where(data[:,16] <= -1.315124, (11.94034671783447266), data[:,16] )) + (data[:,27])) <= 0.710161, (4.0), ((((data[:,31]) * 2.0)) - ((4.0))) ), np.where((4.0) > -0.181653, data[:,31], (9.0) ) )) - (data[:,5]))) * 2.0)) +
            0.500000*np.tanh(((np.where(((data[:,31]) - (data[:,21])) <= 0.935776, np.where((-1.0*((data[:,27]))) <= 0.649640, data[:,0], data[:,21] ), data[:,31] )) - (np.where(np.where(data[:,13] > 0.958639, np.where(data[:,13] > 0.958639, data[:,31], np.where(data[:,31] > 0.958639, data[:,17], data[:,0] ) ), data[:,17] ) > 0.498365, data[:,2], data[:,13] )))) +
            0.500000*np.tanh(((((((((((((((((np.where(((data[:,9]) * (np.where(data[:,2] <= 1.393889, data[:,9], data[:,35] ))) <= 2.052433, data[:,5], data[:,35] )) - (np.where(data[:,2] <= 1.393889, data[:,9], data[:,5] )))) * 2.0)) * 2.0)) * 2.0)) * 2.0)) - (data[:,12]))) - (data[:,9]))) * 2.0)) +
            0.500000*np.tanh(np.where(data[:,13] > -0.186395, ((np.where(data[:,11] > 1.393533, data[:,21], ((data[:,24]) + (((np.where(data[:,24] > 1.393533, data[:,13], ((data[:,7]) * 2.0) )) - (((data[:,21]) * 2.0))))) )) - (data[:,1])), ((((((((data[:,21]) * 2.0)) + (data[:,1]))) * 2.0)) + (data[:,24])) )) +
            0.500000*np.tanh(((((((((np.where(data[:,12] <= 0.649640, np.where((2.49525237083435059) > 1.393533, np.where(((data[:,13]) - (data[:,17])) > 0.290751, (-1.0*(((2.49525237083435059)))), (7.04237747192382812) ), (((7.04237747192382812)) * 2.0) ), ((data[:,15]) - (data[:,12])) )) - (((data[:,34]) * 2.0)))) * 2.0)) - (data[:,11]))) * 2.0)) +
            0.500000*np.tanh(np.where(data[:,34] <= -1.140715, (12.12134552001953125), np.where(data[:,26] <= -1.140715, (-1.0*(((12.12134552001953125)))), np.where(data[:,11] <= -1.140715, data[:,34], np.where(data[:,28] <= -1.140715, (12.12134552001953125), ((((np.where(data[:,22] <= -1.140715, data[:,13], ((data[:,0]) - (data[:,13])) )) - (data[:,2]))) * ((12.12134552001953125))) ) ) ) )) +
            0.500000*np.tanh(np.where(data[:,35] <= 0.156042, np.where(data[:,29] > 0.227700, (-1.0*((np.where(data[:,17] > 0.663979, data[:,2], ((((((data[:,27]) * 2.0)) * 2.0)) * 2.0) )))), ((((((((data[:,29]) * 2.0)) * 2.0)) * 2.0)) + (np.where(data[:,12] > 0.190387, data[:,27], (8.0) ))) ), (9.0) )) +
            0.500000*np.tanh((((((-1.0*((np.where(np.where(data[:,29] > -0.213041, data[:,29], data[:,29] ) > -0.213041, np.where(np.where(data[:,29] > 0.025782, data[:,17], np.where(data[:,2] <= 1.464832, (11.26827716827392578), (11.26827716827392578) ) ) > 0.339377, data[:,2], data[:,13] ), np.where(data[:,28] > 0.025782, data[:,28], data[:,2] ) ))))) * ((11.26827716827392578)))) * ((11.26827716827392578)))) +
            0.500000*np.tanh(((np.where((-1.0*((data[:,21]))) > -0.186395, np.where((-1.0*((data[:,21]))) <= 1.009255, np.where(data[:,34] > 1.009255, data[:,21], (7.0) ), ((data[:,34]) - ((13.29709720611572266))) ), data[:,31] )) - (((((((data[:,21]) + (((data[:,21]) + (data[:,34]))))) + (data[:,34]))) + (data[:,21]))))) +
            0.500000*np.tanh(((data[:,14]) - (np.where(np.where(data[:,28] > -0.186395, data[:,26], np.where(data[:,29] > -0.186395, data[:,26], np.where(data[:,5] <= 1.368713, data[:,27], data[:,26] ) ) ) > 0.191148, np.where(np.where(((data[:,28]) / 2.0) > -0.186395, data[:,28], data[:,13] ) <= 1.368713, data[:,30], data[:,28] ), ((((data[:,13]) * 2.0)) * 2.0) )))) +
            0.500000*np.tanh(((((((((np.where(data[:,7] > 1.964719, ((data[:,29]) * 2.0), ((data[:,7]) * 2.0) )) - (np.where(((data[:,29]) * 2.0) <= 0.759151, data[:,9], ((((data[:,27]) * 2.0)) * 2.0) )))) - (data[:,2]))) - (data[:,2]))) - (data[:,9]))) +
            0.500000*np.tanh(((((((np.where(data[:,13] > -0.597506, data[:,7], data[:,21] )) - (np.where(data[:,1] > 0.233543, data[:,13], data[:,34] )))) - (np.where(data[:,31] <= 1.463885, np.tanh((data[:,21])), data[:,34] )))) - (np.where(data[:,1] > 0.233543, data[:,13], np.where(data[:,1] > 0.233543, data[:,34], data[:,11] ) )))) +
            0.500000*np.tanh(((((((data[:,7]) - (data[:,9]))) + (((data[:,5]) + (((((((data[:,5]) - (np.where(((data[:,28]) - (data[:,9])) <= 1.072774, np.where(data[:,1] <= 1.072774, data[:,9], data[:,21] ), data[:,9] )))) - (((data[:,13]) * (data[:,1]))))) - (data[:,9]))))))) * 2.0)) +
            0.500000*np.tanh(((np.where(data[:,0] <= 1.393533, data[:,7], (-1.0*((((data[:,9]) * 2.0)))) )) + (((np.where(data[:,9] <= 1.626111, data[:,5], (-1.0*((data[:,9]))) )) + (((np.where((-1.0*((data[:,9]))) <= 1.056516, data[:,4], (-1.0*((data[:,9]))) )) + ((-1.0*((((data[:,9]) * 2.0))))))))))) +
            0.500000*np.tanh(np.where(np.where(data[:,34] <= 0.568808, data[:,10], (-1.0*(((5.0)))) ) <= 0.167596, np.where(((data[:,34]) / 2.0) > -0.605427, (-1.0*(((5.0)))), (4.0) ), np.where(data[:,34] > 0.041261, np.where(data[:,27] <= 0.568808, (5.0), (-1.0*(((5.0)))) ), (-1.0*(((5.0)))) ) )) +
            0.500000*np.tanh(((np.where(data[:,2] > 1.323875, ((data[:,16]) - (data[:,12])), ((((((data[:,10]) + (data[:,13]))) * (data[:,0]))) + (((((data[:,16]) * (((data[:,0]) * 2.0)))) + (data[:,10])))) )) - (((data[:,9]) * 2.0)))) +
            0.500000*np.tanh(((np.where(data[:,12] <= -0.014824, ((data[:,30]) * 2.0), np.where((((data[:,11]) + (data[:,0]))/2.0) > 0.310780, np.where(data[:,11] > 1.291871, data[:,9], ((((data[:,30]) + (data[:,30]))) + (((((data[:,13]) * 2.0)) + (data[:,30])))) ), data[:,0] ) )) - (((data[:,9]) + (data[:,30]))))) +
            0.500000*np.tanh(np.where(data[:,0] > 1.323875, data[:,21], ((np.where(np.where(data[:,31] > 1.626111, data[:,0], data[:,31] ) > 1.626111, data[:,31], np.where(np.where(data[:,7] > 1.626111, data[:,7], data[:,31] ) > 1.626111, data[:,31], np.where(data[:,21] > 0.227700, np.where(data[:,7] > 0.227700, data[:,0], data[:,7] ), data[:,7] ) ) )) * 2.0) )) +
            0.500000*np.tanh(((((((((np.where(data[:,1] <= -0.070749, ((np.where(data[:,17] <= -0.597506, data[:,2], data[:,13] )) + (((((np.where(data[:,10] <= -0.597506, data[:,1], data[:,10] )) - (data[:,9]))) * 2.0))), np.where(data[:,13] <= -0.597506, data[:,1], data[:,17] ) )) * 2.0)) - (data[:,2]))) * 2.0)) - (data[:,13]))) +
            0.500000*np.tanh(((((np.where(data[:,4] <= 0.571623, data[:,4], np.where(data[:,13] <= 1.508813, data[:,0], ((data[:,13]) * (data[:,0])) ) )) * 2.0)) + (((((np.where(data[:,30] <= 1.508813, ((np.where(data[:,31] <= 1.508813, ((data[:,13]) * (data[:,0])), (9.0) )) * 2.0), data[:,0] )) + (data[:,0]))) * 2.0)))) +
            0.500000*np.tanh(np.where(data[:,34] <= -1.667696, (7.62526798248291016), ((np.where(data[:,29] <= 0.167596, data[:,19], ((((((((((np.where((-1.0*((data[:,13]))) <= 0.571425, data[:,17], (-1.0*((data[:,17]))) )) - (data[:,13]))) - (data[:,2]))) * 2.0)) * 2.0)) * 2.0) )) * 2.0) )) +
            0.500000*np.tanh(np.where(data[:,13] <= 0.395804, np.where(data[:,34] <= -0.597506, data[:,24], np.where(data[:,28] <= -0.597506, data[:,28], data[:,5] ) ), ((((((((((data[:,17]) - (data[:,28]))) - (data[:,5]))) - (data[:,34]))) - (np.where(data[:,28] <= -0.597506, data[:,1], data[:,28] )))) - (data[:,1])) )) +
            0.500000*np.tanh(np.where(np.where(data[:,14] > -0.186395, data[:,14], data[:,5] ) <= 1.949028, np.where(((data[:,27]) * (data[:,27])) <= 0.568808, ((((((((data[:,6]) * 2.0)) * 2.0)) * 2.0)) * 2.0), (-1.0*((((((np.where(data[:,1] > -0.186395, data[:,27], data[:,5] )) + (data[:,12]))) + (data[:,12]))))) ), data[:,14] )) +
            0.500000*np.tanh(np.where(data[:,11] > -1.315124, (((((((((((((np.where(np.where(data[:,33] <= 1.291871, data[:,35], (((13.86629390716552734)) * (data[:,35])) ) <= 0.147235, data[:,7], (5.0) )) - (data[:,21]))) + (data[:,21]))/2.0)) - (data[:,2]))) - (data[:,13]))) - (data[:,21]))) * ((4.0))), data[:,13] )) +
            0.500000*np.tanh(np.where(data[:,10] > -1.667696, np.where(data[:,34] > -1.667696, np.where((-1.0*((data[:,7]))) > 0.674254, data[:,7], ((((((data[:,25]) - ((-1.0*((data[:,23])))))) - (np.where(data[:,13] <= 0.516749, (-1.0*((data[:,10]))), data[:,1] )))) - (data[:,2])) ), (-1.0*((data[:,1]))) ), (-1.0*((data[:,10]))) )) +
            0.500000*np.tanh(np.where(data[:,10] > -0.350244, ((((data[:,15]) - (data[:,13]))) + (((((((data[:,10]) - (data[:,9]))) + (data[:,7]))) + (np.where(data[:,9] > 0.906020, ((data[:,7]) - (data[:,9])), ((data[:,13]) - (data[:,16])) ))))), np.where(data[:,9] > -1.667696, data[:,10], (5.0) ) )) +
            0.500000*np.tanh(((data[:,5]) - (((data[:,9]) - (((((np.tanh((((data[:,5]) * 2.0)))) * 2.0)) - (((data[:,9]) - (((((data[:,5]) - (((data[:,9]) - (((data[:,16]) * (np.where(data[:,16] <= -1.667696, data[:,5], data[:,0] )))))))) - (data[:,9]))))))))))) +
            0.500000*np.tanh((-1.0*((((np.where(np.where(data[:,27] > -0.037664, data[:,11], np.where(np.where(data[:,1] <= 1.964719, ((data[:,27]) - (data[:,26])), np.where(data[:,1] <= 0.034498, data[:,26], data[:,9] ) ) > 0.639261, data[:,26], (14.18484878540039062) ) ) > 0.726425, ((data[:,26]) - (data[:,1])), ((data[:,1]) * 2.0) )) + (data[:,9])))))) +
            0.500000*np.tanh(((np.where(data[:,31] > 1.804575, data[:,31], ((np.where(data[:,28] > 1.804575, data[:,21], ((np.where(np.where(((data[:,29]) * 2.0) <= 0.432894, data[:,32], data[:,0] ) > 0.421142, data[:,27], np.where(data[:,27] > -0.441078, data[:,0], ((data[:,21]) + (data[:,28])) ) )) * 2.0) )) * 2.0) )) * 2.0)) +
            0.500000*np.tanh(((((np.where(data[:,0] > 0.709055, data[:,27], np.where(data[:,34] <= -0.597506, data[:,24], np.where(data[:,13] <= 0.206136, data[:,10], data[:,0] ) ) )) - (np.where(data[:,32] <= 0.817200, data[:,21], data[:,1] )))) - (np.where(data[:,10] <= 0.817200, np.where(data[:,21] <= 0.817200, data[:,3], data[:,10] ), data[:,2] )))) +
            0.500000*np.tanh(((np.where(np.where(data[:,33] <= 2.052433, data[:,2], data[:,33] ) > 1.208578, (-1.0*((((data[:,17]) * 2.0)))), np.where(data[:,1] <= 0.214716, np.where(data[:,16] > 0.910885, (-1.0*((data[:,16]))), data[:,19] ), ((data[:,17]) * 2.0) ) )) - (np.where(data[:,9] <= -0.597506, data[:,9], data[:,33] )))) +
            0.500000*np.tanh(np.where(data[:,14] <= 1.949028, np.where(data[:,0] > -0.186395, ((((data[:,7]) + (data[:,13]))) + (np.where(data[:,13] > -0.103657, ((data[:,12]) + (data[:,12])), data[:,28] ))), ((data[:,0]) - (((data[:,13]) + (((((data[:,13]) + (data[:,12]))) + (data[:,28])))))) ), data[:,31] )) +
            0.500000*np.tanh(((((data[:,34]) * (np.where(data[:,34] <= 1.949028, data[:,8], data[:,16] )))) - ((-1.0*((np.where(data[:,16] <= 0.829319, np.where(np.where(data[:,6] <= 0.779899, data[:,27], np.where(data[:,28] <= 0.779899, data[:,27], data[:,8] ) ) <= -0.441078, ((((((data[:,16]) * 2.0)) * 2.0)) * 2.0), data[:,6] ), data[:,32] ))))))) +
            0.500000*np.tanh(np.where(data[:,27] > 0.290751, np.where(data[:,1] <= -0.070749, np.where(data[:,18] <= -0.070749, data[:,18], (14.43910408020019531) ), (-1.0*(((14.43910408020019531)))) ), ((((((((np.where((-1.0*((data[:,16]))) > 0.197987, data[:,27], ((np.where(data[:,26] > 0.197987, data[:,27], (14.43910408020019531) )) * 2.0) )) * 2.0)) * 2.0)) * 2.0)) * 2.0) )) +
            0.500000*np.tanh(((np.where(data[:,27] <= 0.589957, np.where(np.where(((data[:,5]) / 2.0) > 1.008016, data[:,5], (-1.0*((((data[:,5]) / 2.0)))) ) <= 0.589957, ((data[:,28]) + (((data[:,6]) + (((data[:,7]) + (data[:,6])))))), data[:,7] ), (-1.0*((data[:,28]))) )) - (data[:,5]))) +
            0.500000*np.tanh(np.where(data[:,34] > -1.667696, ((((((((((((data[:,0]) + (((data[:,17]) * 2.0)))/2.0)) * 2.0)) + (data[:,6]))/2.0)) * 2.0)) + (((np.where(data[:,17] <= 1.291871, data[:,13], data[:,7] )) * ((((((((data[:,0]) + (((data[:,17]) * 2.0)))/2.0)) * 2.0)) * 2.0))))), data[:,31] )) +
            0.500000*np.tanh(np.where(np.where((-1.0*((data[:,8]))) <= 1.964719, data[:,29], data[:,8] ) > 0.290751, ((((data[:,7]) - (((((data[:,21]) + (((((data[:,21]) + (data[:,13]))) + (data[:,2]))))) + (data[:,13]))))) - (((data[:,2]) + (data[:,13])))), (-1.0*((data[:,8]))) )) +
            0.500000*np.tanh(((((np.where((-1.0*((data[:,28]))) <= 0.861132, np.where(data[:,9] <= -1.667696, data[:,16], ((np.where((-1.0*((data[:,31]))) <= 0.861132, np.where(data[:,27] <= -1.667696, data[:,5], ((((data[:,5]) * 2.0)) - (data[:,16])) ), data[:,5] )) - (data[:,3])) ), data[:,27] )) - (data[:,9]))) - (data[:,9]))) +
            0.500000*np.tanh(np.where(data[:,24] <= 1.949028, np.where(np.where(((data[:,16]) * 2.0) <= 0.575617, data[:,17], (-1.0*((data[:,27]))) ) > 0.293758, data[:,29], (-1.0*((np.where((((-1.0*((data[:,27])))) * 2.0) > 1.208578, data[:,0], np.where(((((data[:,29]) * 2.0)) * (data[:,2])) <= 0.293758, data[:,1], (12.81255054473876953) ) )))) ), (12.81255054473876953) )) +
            0.500000*np.tanh(((np.where(data[:,24] <= 1.949028, np.where(data[:,26] <= 1.949028, np.where(data[:,27] <= -0.350244, data[:,30], np.where(data[:,21] <= -0.350244, data[:,1], np.where(data[:,27] <= 0.258177, np.where(data[:,24] <= 1.208578, data[:,34], ((data[:,22]) - (data[:,24])) ), ((data[:,22]) - (data[:,1])) ) ) ), data[:,21] ), data[:,24] )) * 2.0)) +
            0.500000*np.tanh(np.where(data[:,5] > -1.667696, ((data[:,15]) - (np.where(np.where(data[:,12] > -1.667696, np.where(data[:,34] > 0.383405, np.where((11.03109550476074219) > -1.667696, np.where(data[:,13] > 0.383405, ((data[:,15]) - (data[:,13])), (11.03109550476074219) ), data[:,12] ), data[:,5] ), data[:,13] ) <= 0.383405, (11.03109550476074219), data[:,12] ))), (11.03109550476074219) )) +
            0.500000*np.tanh((-1.0*((np.where(np.where(data[:,1] > 0.103341, data[:,1], data[:,33] ) > 1.913269, data[:,34], np.where(data[:,24] > 1.913269, data[:,34], np.where(data[:,27] > 1.913269, data[:,4], ((data[:,27]) + (((np.where(data[:,4] <= 0.284687, data[:,31], data[:,2] )) + (((data[:,21]) + (data[:,33])))))) ) ) ))))) +
            0.500000*np.tanh(((np.where(data[:,11] <= 0.478862, np.where(data[:,0] > -0.389547, np.where(data[:,10] <= -0.597506, (-1.0*((data[:,24]))), np.where(data[:,27] <= -0.597506, data[:,28], np.where(data[:,27] <= 0.851518, (3.54475116729736328), data[:,18] ) ) ), np.where(data[:,27] > -0.597506, data[:,0], (-1.0*((data[:,26]))) ) ), data[:,19] )) + ((-1.0*((data[:,9])))))) +
            0.500000*np.tanh(np.where(data[:,27] <= 0.699615, np.where(((data[:,18]) - (data[:,29])) > 0.453559, np.where(np.where(((data[:,2]) - (data[:,9])) > 1.415639, data[:,18], data[:,10] ) > 0.453559, (5.0), ((data[:,18]) - ((4.0))) ), data[:,7] ), ((((data[:,18]) - (data[:,29]))) - (data[:,10])) )) +
            0.500000*np.tanh(np.where(data[:,2] <= 0.980693, np.where(((data[:,23]) / 2.0) <= 0.252331, np.where(data[:,9] > -1.667696, np.where(np.where(np.where(((data[:,23]) / 2.0) > -0.441078, data[:,23], data[:,27] ) <= 0.663979, data[:,14], data[:,23] ) > -0.441078, data[:,6], np.where(data[:,23] > -0.441078, (9.0), data[:,23] ) ), (9.0) ), data[:,27] ), data[:,23] )) +
            0.500000*np.tanh(((((data[:,7]) - (data[:,9]))) + (((np.where(((data[:,7]) - (data[:,9])) <= 0.487005, ((data[:,7]) + (((data[:,6]) + (((((((data[:,6]) - (data[:,1]))) - (data[:,16]))) - (data[:,9])))))), data[:,23] )) + (((data[:,6]) - (data[:,9]))))))) +
            0.500000*np.tanh(np.where(data[:,16] > 0.727592, ((((((data[:,0]) - (data[:,1]))) - (data[:,28]))) - (data[:,28])), np.where(np.where(data[:,27] > 0.232898, data[:,28], ((np.tanh((data[:,28]))) - (data[:,0])) ) <= -0.286417, data[:,27], np.where(data[:,27] > -0.286417, ((data[:,26]) * 2.0), (8.05119228363037109) ) ) )) +
            0.500000*np.tanh(np.where(data[:,14] <= 1.902601, np.where(data[:,2] <= 0.980048, np.where(data[:,0] > -0.771350, np.where(data[:,17] > -0.016059, data[:,19], np.where(np.where(data[:,26] > -0.771350, data[:,19], data[:,2] ) > -0.144300, data[:,17], data[:,26] ) ), data[:,0] ), (-1.0*((data[:,17]))) ), data[:,14] )) +
            0.500000*np.tanh(np.where(data[:,17] <= 1.478112, np.where(data[:,13] <= -0.350244, np.where(data[:,17] > 0.108196, data[:,13], np.where(data[:,29] > 0.108196, data[:,29], data[:,30] ) ), np.where(data[:,29] <= 0.167596, np.where(data[:,30] <= 0.167596, data[:,13], data[:,29] ), np.where(data[:,13] <= 0.944034, data[:,17], (-1.0*((data[:,29]))) ) ) ), (-1.0*((data[:,13]))) )) +
            0.500000*np.tanh(((((np.where(data[:,16] <= 0.139298, ((np.where((((data[:,2]) + (data[:,9]))/2.0) <= 0.622676, np.where(((data[:,16]) - (data[:,0])) <= 0.536789, (12.23415565490722656), data[:,0] ), data[:,16] )) * ((((data[:,13]) + (data[:,9]))/2.0))), data[:,0] )) - (data[:,9]))) - (data[:,13]))) +
            0.500000*np.tanh(np.where(data[:,33] <= 0.116560, (-1.0*((np.where(np.where(np.where(data[:,33] > 2.330122, data[:,29], data[:,30] ) > 2.330122, data[:,11], data[:,32] ) <= 0.139298, (-1.0*((((data[:,29]) * 2.0)))), data[:,28] )))), ((((data[:,5]) + (np.where(data[:,32] <= 1.478112, data[:,32], data[:,32] )))) * (data[:,14])) )) +
            0.500000*np.tanh(np.where(data[:,7] <= 0.744603, np.where(((np.where(np.where((2.0) <= 0.169775, data[:,7], data[:,13] ) <= -0.597506, data[:,1], np.where(data[:,0] <= -0.597506, data[:,0], data[:,0] ) )) - (data[:,1])) <= -0.597506, data[:,0], ((((data[:,16]) - (data[:,0]))) - (data[:,0])) ), data[:,19] )) +
            0.500000*np.tanh(np.where(data[:,27] <= 0.597027, np.where(data[:,12] <= 1.258170, np.where(data[:,2] <= 1.258170, np.where(data[:,17] > 0.111902, ((((data[:,28]) + (((data[:,17]) + (data[:,27]))))) + (data[:,27])), np.where(((data[:,12]) + (data[:,27])) <= -0.605427, data[:,28], data[:,0] ) ), data[:,2] ), data[:,0] ), data[:,18] )) +
            0.500000*np.tanh(np.where(np.where(((data[:,1]) + (data[:,12])) > -0.000132, (12.46490383148193359), data[:,2] ) <= 0.812024, ((((((((((np.where(data[:,28] > -0.350244, np.where(data[:,27] <= 0.251247, np.where(data[:,27] <= 0.251247, data[:,6], data[:,1] ), data[:,12] ), data[:,27] )) * 2.0)) * 2.0)) * 2.0)) * 2.0)) * 2.0), data[:,0] )) +
            0.500000*np.tanh(np.where(data[:,32] <= 0.258177, np.where(data[:,17] > 0.478862, (9.23093509674072266), np.where(data[:,13] > 0.258177, (-1.0*(((9.23093509674072266)))), np.where(data[:,29] > -0.144302, (9.23093509674072266), data[:,32] ) ) ), (-1.0*((np.where(np.where(data[:,13] > -0.144302, data[:,1], data[:,17] ) > -0.144302, np.where((9.23093509674072266) > -0.144302, (14.33013820648193359), data[:,32] ), data[:,17] )))) )) +
            0.500000*np.tanh((-1.0*((np.where(data[:,0] > -0.597506, np.where(((data[:,27]) + (data[:,9])) > 1.415639, ((data[:,9]) + (data[:,28])), np.where(data[:,2] <= 1.351329, data[:,0], data[:,28] ) ), np.where(data[:,9] > 0.432894, (4.0), ((((((data[:,22]) + (data[:,19]))) + (data[:,28]))) + (data[:,28])) ) ))))) +
            0.500000*np.tanh(np.where(data[:,17] <= 0.877848, np.where(data[:,2] > 0.612743, np.where(data[:,5] <= 0.612743, data[:,30], data[:,30] ), ((np.where(data[:,2] > 0.612743, data[:,19], ((((np.where(np.where(data[:,29] <= 0.612743, data[:,2], data[:,30] ) > -0.354205, ((data[:,5]) - (data[:,9])), data[:,17] )) * 2.0)) * 2.0) )) * 2.0) ), data[:,19] )) +
            0.500000*np.tanh(np.where(data[:,13] <= 1.208578, np.where(data[:,26] <= 1.208578, ((np.where(data[:,11] > -0.597506, data[:,34], data[:,26] )) + (((data[:,6]) + (np.where(np.where(data[:,4] > 0.797195, data[:,34], data[:,11] ) <= 0.347207, ((data[:,4]) * (data[:,34])), data[:,11] ))))), (-1.0*((data[:,4]))) ), (-1.0*((data[:,34]))) )) +
            0.500000*np.tanh(np.where(data[:,15] <= 1.072774, np.where(data[:,11] <= 1.072774, ((((data[:,7]) - (np.where(np.where(data[:,30] <= -0.771350, data[:,30], data[:,13] ) <= -0.771350, data[:,0], data[:,4] )))) - (np.where(np.where(data[:,11] <= -0.771350, data[:,11], data[:,13] ) <= -0.771350, data[:,0], data[:,13] ))), data[:,11] ), data[:,4] )) +
            0.500000*np.tanh(np.where(data[:,2] <= 0.571425, np.where(np.where(np.where(data[:,29] > -0.597506, data[:,1], data[:,16] ) <= 0.154556, data[:,28], data[:,16] ) > -0.049679, ((((data[:,0]) - (data[:,13]))) - (data[:,13])), ((data[:,29]) - (((((data[:,0]) - (data[:,16]))) - (data[:,13])))) ), (-1.0*((data[:,28]))) )) +
            0.500000*np.tanh(((np.where(data[:,2] <= -0.186395, np.where(np.where(data[:,16] > 0.869367, data[:,34], np.where(np.where(data[:,13] <= -0.186395, data[:,29], data[:,13] ) > 0.869367, (9.77058792114257812), data[:,11] ) ) > 0.290751, ((((np.where(data[:,13] <= -0.186395, data[:,16], data[:,11] )) * 2.0)) * 2.0), data[:,34] ), data[:,16] )) * (data[:,29]))) +
            0.500000*np.tanh(((np.where(data[:,13] <= 0.490982, ((np.where(data[:,29] <= 0.285051, np.where(np.where(data[:,30] > 0.958639, data[:,25], ((data[:,30]) * (data[:,29])) ) > 0.744603, data[:,30], data[:,6] ), data[:,13] )) + (data[:,25])), data[:,23] )) + (np.where(data[:,26] > -0.304789, data[:,13], data[:,30] )))) +
            0.500000*np.tanh(np.where(data[:,18] <= 0.980693, np.where(data[:,26] <= 0.580256, np.where(data[:,19] <= -0.186395, data[:,21], np.where(data[:,21] <= -0.186395, np.where(data[:,13] > 0.742172, (((-1.0*((data[:,13])))) * 2.0), data[:,21] ), (((((-1.0*((data[:,13])))) * 2.0)) * 2.0) ) ), data[:,18] ), np.where(data[:,2] > 0.742172, data[:,18], data[:,19] ) )) +
            0.500000*np.tanh(np.where(np.where(data[:,2] <= 1.012941, data[:,33], data[:,12] ) > 0.378488, np.where(data[:,2] <= 0.980693, ((((((np.where(data[:,30] <= 0.980693, data[:,0], data[:,8] )) - (np.where(data[:,33] > 0.833173, data[:,8], data[:,30] )))) - (data[:,2]))) - (data[:,30])), (-1.0*((data[:,30]))) ), data[:,30] )) +
            0.500000*np.tanh(np.where(data[:,18] <= 0.358782, np.where(data[:,9] <= -0.213041, np.where(data[:,16] > 0.591757, np.where(np.where(data[:,2] > -0.597506, data[:,1], data[:,16] ) <= -0.350244, (5.38161420822143555), data[:,9] ), data[:,34] ), ((np.where(data[:,9] > 0.591757, data[:,18], np.where(data[:,16] > 0.310780, data[:,34], (5.38161420822143555) ) )) + (data[:,0])) ), data[:,2] )) +
            0.500000*np.tanh(((((np.where(((data[:,26]) - (data[:,28])) <= 0.113170, ((np.where(data[:,26] > -0.771350, (12.02979564666748047), data[:,26] )) - ((14.58810615539550781))), np.where(np.where(data[:,27] > 0.980693, np.where(data[:,26] > 1.128857, data[:,27], (14.58810615539550781) ), data[:,26] ) > 1.128857, data[:,23], (14.58810615539550781) ) )) - (data[:,34]))) * (data[:,27]))) +
            0.500000*np.tanh(np.where(np.where(data[:,17] <= 0.744603, np.where(data[:,11] <= 1.368713, data[:,13], data[:,11] ), data[:,8] ) <= 0.311449, np.where(np.where(data[:,6] > 0.571425, data[:,25], data[:,3] ) > 0.197987, data[:,6], data[:,28] ), (-1.0*((np.where(data[:,13] > 1.333578, data[:,8], np.where(data[:,17] <= 1.368713, data[:,13], data[:,13] ) )))) )) +
            0.500000*np.tanh(((np.where(np.where(data[:,19] > 1.012941, data[:,19], data[:,18] ) > -0.771350, (((((data[:,19]) + ((-1.0*((data[:,0])))))) + (data[:,2]))/2.0), np.where(data[:,27] <= 0.258177, np.where(data[:,26] <= 0.258177, np.where(data[:,26] <= 0.258177, data[:,18], data[:,26] ), data[:,26] ), (-1.0*((data[:,0]))) ) )) * (data[:,18]))))

def GPClusterII(data):
    return (0.500000*np.tanh(((((data[:,28]) - (((((data[:,0]) + (((data[:,17]) - (((((((data[:,27]) - (((data[:,17]) - (data[:,7]))))) - (data[:,0]))) * 2.0)))))) - (data[:,26]))))) * 2.0)) +
            0.500000*np.tanh(((((((((((((((np.where(data[:,27] > 0.980693, data[:,17], ((data[:,27]) * 2.0) )) - (np.where(data[:,27] > 0.190387, data[:,17], data[:,2] )))) - (data[:,2]))) - (data[:,2]))) - (data[:,2]))) + (((((data[:,26]) - (data[:,17]))) - (data[:,17]))))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((((data[:,9]) + (((data[:,16]) + (((((data[:,27]) + (((data[:,21]) - (data[:,0]))))) * 2.0)))))) * 2.0)) * 2.0)) * 2.0)) + (((data[:,9]) + (data[:,0]))))) * 2.0)) + (((data[:,27]) * 2.0)))) +
            0.500000*np.tanh(((((np.where(data[:,13] > 1.886870, ((np.tanh((data[:,0]))) - ((14.54058074951171875))), data[:,21] )) + (((data[:,13]) - (np.where(data[:,14] <= 1.964719, np.where(np.tanh(((14.54058456420898438))) <= 1.964719, np.tanh((data[:,0])), data[:,0] ), (7.54740190505981445) )))))) * ((14.54058456420898438)))) +
            0.500000*np.tanh(((((np.where(data[:,27] <= 1.626111, ((((((data[:,27]) + (data[:,21]))) - (data[:,0]))) * 2.0), ((data[:,21]) - (data[:,13])) )) + (np.where(data[:,21] <= -0.597506, ((data[:,0]) + (data[:,21])), data[:,9] )))) * 2.0)) +
            0.500000*np.tanh(((((((((((((((((np.where(((data[:,13]) * 2.0) <= 2.237560, ((data[:,13]) * 2.0), data[:,0] )) - (data[:,0]))) * 2.0)) - ((((data[:,13]) + (data[:,33]))/2.0)))) - (data[:,30]))) * 2.0)) - (data[:,0]))) - (data[:,3]))) - ((((-1.0*(((6.0))))) / 2.0)))) +
            0.500000*np.tanh((((10.0)) - (((np.where(((((np.where(np.where(data[:,0] > 1.005949, (10.0), (-1.0*((data[:,30]))) ) > 1.005949, (10.0), data[:,0] )) - (data[:,13]))) - (data[:,13])) > 1.005949, (10.0), ((np.where(data[:,30] > 1.005949, (10.0), ((data[:,27]) - (data[:,30])) )) * 2.0) )) * 2.0)))) +
            0.500000*np.tanh((((5.24680280685424805)) * (((((data[:,27]) - (np.where(((data[:,13]) * (data[:,13])) <= 2.052433, np.where(((data[:,30]) * (((data[:,30]) + (data[:,17])))) <= 2.052433, data[:,0], (5.24680280685424805) ), (5.24680280685424805) )))) - (data[:,17]))))) +
            0.500000*np.tanh((((((((((((data[:,21]) + (((np.where(data[:,27] > 0.481044, np.where(data[:,27] > 0.481044, ((data[:,21]) + (data[:,21])), data[:,9] ), data[:,26] )) + (((data[:,9]) + (((((data[:,27]) + (data[:,21]))) * 2.0)))))))/2.0)) - (data[:,0]))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((((np.where(np.where(data[:,17] > -0.605427, data[:,27], data[:,13] ) <= 0.591399, ((data[:,27]) * 2.0), data[:,9] )) - (data[:,0]))) - (data[:,17]))) * ((3.83133268356323242)))) - (((data[:,27]) * 2.0)))) * ((3.83133268356323242)))) - (data[:,17]))) + ((3.83133268356323242)))) +
            0.500000*np.tanh(((((np.where(data[:,24] <= 1.949028, ((np.where(data[:,27] <= 1.949028, ((((((((((((((data[:,16]) * 2.0)) - (data[:,12]))) - (data[:,0]))) + (data[:,27]))) + (data[:,9]))) * 2.0)) + (data[:,27])), data[:,9] )) * 2.0), data[:,9] )) * 2.0)) + (data[:,16]))) +
            0.500000*np.tanh(((((((((((((np.where(np.where(data[:,9] <= 2.052433, ((data[:,13]) + (data[:,21])), data[:,21] ) <= 2.052433, ((data[:,13]) + (((data[:,21]) + (data[:,9])))), data[:,9] )) + (data[:,16]))) * 2.0)) + (data[:,21]))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((np.where(data[:,27] > 0.980693, data[:,21], ((((data[:,13]) + (data[:,21]))) * 2.0) )) + (((np.where(data[:,21] <= 2.052433, data[:,9], (((-1.0*((data[:,21])))) * 2.0) )) - (data[:,0]))))) * 2.0)) - (data[:,0]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((((((np.where(data[:,27] <= 0.761369, data[:,27], ((data[:,7]) - (data[:,0])) )) + (data[:,7]))) - (data[:,0]))) + (data[:,21]))) * 2.0)) * 2.0)) - (data[:,0]))) * 2.0)) - (data[:,27]))) +
            0.500000*np.tanh((((((9.40491008758544922)) * (np.where(data[:,14] > 1.949028, data[:,0], (((((data[:,7]) - (data[:,0]))) + ((((((np.where(data[:,27] <= 0.219845, data[:,27], data[:,7] )) - (data[:,7]))) + (data[:,21]))/2.0)))/2.0) )))) + (((((data[:,7]) - (data[:,0]))) - (data[:,14]))))) +
            0.500000*np.tanh(((((((((((np.where(data[:,9] > -1.667696, ((np.where(data[:,27] > 1.050093, data[:,9], data[:,13] )) - (data[:,0])), data[:,34] )) * 2.0)) + (((data[:,9]) + (((data[:,26]) + (((data[:,21]) * 2.0)))))))) * 2.0)) + (data[:,21]))) * 2.0)) +
            0.500000*np.tanh(((((((((np.where(np.tanh((((data[:,16]) - (data[:,0])))) <= 1.056516, ((data[:,9]) + (((((data[:,7]) + (((data[:,16]) - (data[:,0]))))) * 2.0))), np.tanh((data[:,0])) )) + (((data[:,13]) - (data[:,0]))))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((np.where(data[:,31] > 1.949028, np.where(data[:,27] > 0.980693, data[:,16], data[:,5] ), ((((((((np.where(data[:,27] > 0.980693, data[:,29], data[:,27] )) - (data[:,0]))) + (data[:,16]))) * 2.0)) * 2.0) )) + (data[:,5]))) + (data[:,5]))) + (data[:,16]))) * 2.0)) +
            0.500000*np.tanh(((((((((((np.where((-1.0*((data[:,27]))) <= 0.980693, data[:,9], data[:,27] )) + (((((data[:,7]) + (((data[:,16]) - (data[:,0]))))) * 2.0)))) * 2.0)) * 2.0)) * 2.0)) + (((np.where(data[:,0] <= 1.949028, data[:,27], data[:,9] )) - (data[:,0]))))) +
            0.500000*np.tanh(((((((((np.where(data[:,27] <= 0.710161, data[:,27], data[:,9] )) + (data[:,21]))) + (data[:,28]))) + (((((data[:,21]) + (np.where(np.where(data[:,27] <= 0.710161, data[:,27], data[:,9] ) <= 1.118688, data[:,9], data[:,27] )))) - (data[:,0]))))) * ((7.0)))) +
            0.500000*np.tanh(((data[:,5]) + (((((np.where(data[:,13] <= 0.686716, data[:,13], ((((((data[:,7]) - (data[:,0]))) * 2.0)) - (data[:,13])) )) + (((((((((data[:,16]) + (((((data[:,7]) - (data[:,0]))) * 2.0)))) * 2.0)) + (data[:,13]))) - (data[:,0]))))) * 2.0)))) +
            0.500000*np.tanh(((((((((((((np.where(((data[:,0]) * 2.0) > 0.453559, data[:,7], data[:,9] )) + (((((data[:,7]) - (((data[:,13]) * (data[:,27]))))) - (((data[:,0]) * 2.0)))))) + (data[:,16]))) * 2.0)) * 2.0)) + (data[:,13]))) * 2.0)) +
            0.500000*np.tanh(((((((((data[:,16]) + (((np.where(data[:,16] > 1.004786, data[:,16], (-1.0*((data[:,16]))) )) + (((((((np.where(data[:,13] > 0.829319, (-1.0*((data[:,13]))), data[:,13] )) + (data[:,16]))) * 2.0)) + ((-1.0*((data[:,12])))))))))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((np.where(data[:,31] <= 1.949028, ((np.where(data[:,12] > 0.475895, data[:,16], data[:,9] )) + ((((-1.0*((data[:,12])))) + ((((((-1.0*((data[:,12])))) + (((((data[:,16]) + (np.where(data[:,13] > 0.877848, data[:,28], data[:,27] )))) * 2.0)))) * 2.0))))), data[:,9] )) * 2.0)) +
            0.500000*np.tanh(((((((((data[:,9]) + (((((((((data[:,13]) + (np.where(data[:,13] > -1.667696, data[:,16], data[:,9] )))) - (data[:,26]))) + (data[:,13]))) - (data[:,0]))))) + (np.where(data[:,34] > -1.667696, data[:,16], data[:,13] )))) - (data[:,0]))) + (data[:,16]))) +
            0.500000*np.tanh((((((((((-1.0*((((((((((((((((((data[:,0]) + (data[:,0]))) - (data[:,1]))) - (data[:,7]))) + (data[:,0]))) - (data[:,7]))) + (data[:,0]))) - (data[:,27]))) - (data[:,7])))))) + (data[:,16]))) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((np.where(data[:,27] > 1.559526, data[:,27], data[:,9] )) + (((((data[:,16]) + (((np.where(data[:,28] <= 2.052433, data[:,27], (6.0) )) * ((-1.0*((np.where(data[:,16] <= 2.052433, data[:,27], data[:,16] ))))))))) * ((6.0)))))) * 2.0)) + ((6.0)))) +
            0.500000*np.tanh(((((((((((((data[:,27]) - (np.where(np.where(((data[:,33]) - (data[:,33])) <= 2.052433, data[:,27], np.where((5.0) <= 0.780300, data[:,33], data[:,33] ) ) > 0.824505, data[:,27], data[:,0] )))) * 2.0)) - (np.where(data[:,27] > 1.056516, data[:,27], data[:,4] )))) - (data[:,33]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((data[:,13]) + (data[:,5]))) + (((data[:,21]) - (np.where(data[:,13] <= 1.014400, data[:,0], (6.0) )))))) * 2.0)) + (((data[:,16]) - (np.where(data[:,13] <= 1.014400, data[:,31], np.where(data[:,21] <= 1.014400, data[:,16], data[:,5] ) )))))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((((((((data[:,9]) + ((((((((np.where(data[:,9] <= -1.404206, data[:,9], data[:,21] )) + (data[:,28]))/2.0)) - (data[:,6]))) - (data[:,0]))))) * 2.0)) * 2.0)) + (data[:,27]))) + (np.where(data[:,9] <= -1.404206, data[:,6], data[:,21] )))) * 2.0)) +
            0.500000*np.tanh(((((data[:,1]) + (((np.where(data[:,27] <= 1.964719, ((((np.where(data[:,31] <= 1.964719, ((((((((((data[:,16]) - (data[:,0]))) * 2.0)) + (data[:,27]))) * 2.0)) + (data[:,27])), data[:,0] )) - (data[:,31]))) * 2.0), data[:,31] )) + (((data[:,34]) * 2.0)))))) * 2.0)) +
            0.500000*np.tanh((((((((0.99942350387573242)) - (np.where((-1.0*((data[:,13]))) > 0.663979, (10.00096607208251953), np.where(np.where(data[:,27] > 0.663979, (10.00096607208251953), ((data[:,17]) * 2.0) ) > 0.663979, (10.00096988677978516), data[:,17] ) )))) + (data[:,16]))) + ((0.99942350387573242)))) +
            0.500000*np.tanh(((np.where(data[:,27] > 1.626111, (-1.0*((data[:,27]))), ((((data[:,5]) * 2.0)) + (((((np.where(data[:,26] > 0.227700, ((((((data[:,16]) - (data[:,0]))) - (data[:,0]))) + ((-1.0*((data[:,5]))))), data[:,27] )) + (((data[:,16]) - (data[:,0]))))) * 2.0))) )) * 2.0)) +
            0.500000*np.tanh(((data[:,21]) + (((((((((data[:,28]) - (data[:,0]))) + (((np.where(data[:,28] > 0.339377, data[:,28], data[:,13] )) - (data[:,4]))))) + (data[:,27]))) + (((((data[:,21]) - (data[:,0]))) - (data[:,31]))))))) +
            0.500000*np.tanh(((np.where((-1.0*((((data[:,8]) / 2.0)))) > 0.933562, data[:,8], (9.93983268737792969) )) * ((-1.0*((((data[:,8]) - ((-1.0*((((((np.where(((data[:,8]) / 2.0) > 1.498432, data[:,8], data[:,8] )) / 2.0)) - (data[:,9]))))))))))))) +
            0.500000*np.tanh(((((((((((((np.where(data[:,12] > 2.052433, np.where(data[:,35] <= 2.052433, data[:,12], data[:,11] ), (((data[:,21]) + (((((data[:,7]) - (data[:,35]))) * 2.0)))/2.0) )) * 2.0)) - (np.where(data[:,35] > 0.658478, data[:,35], data[:,35] )))) * 2.0)) * 2.0)) - (data[:,11]))) - (data[:,31]))) +
            0.500000*np.tanh(np.where(data[:,27] > -0.771350, np.where((((data[:,35]) + (data[:,17]))/2.0) > 0.227700, ((((data[:,17]) * ((((data[:,17]) + (data[:,17]))/2.0)))) - ((10.0))), np.where(data[:,27] > 0.465216, data[:,17], (10.0) ) ), ((data[:,13]) + (data[:,26])) )) +
            0.500000*np.tanh(((((data[:,28]) - (data[:,0]))) + (((((((data[:,34]) + (((((data[:,21]) + (np.where(((data[:,21]) + (data[:,13])) <= 0.668715, data[:,13], ((data[:,34]) - (data[:,10])) )))) - (data[:,10]))))) - (data[:,0]))) - (((data[:,34]) * (data[:,10]))))))) +
            0.500000*np.tanh(((np.where(data[:,7] <= 2.052433, ((np.where(data[:,2] <= 2.052433, np.where(data[:,7] <= -0.070749, ((data[:,7]) * 2.0), np.where(data[:,7] <= -0.070749, np.where(data[:,2] > 1.609704, (6.69664049148559570), (14.15584087371826172) ), (10.0) ) ), data[:,12] )) * 2.0), ((data[:,7]) * 2.0) )) * 2.0)) +
            0.500000*np.tanh(((((((np.where(np.where(data[:,33] <= 2.052433, data[:,27], data[:,33] ) <= 0.710161, ((((((data[:,13]) + (((data[:,28]) + (data[:,16]))))) - (data[:,0]))) - (data[:,0])), data[:,17] )) - (np.where(data[:,33] <= 2.052433, data[:,6], data[:,33] )))) * 2.0)) * 2.0)) +
            0.500000*np.tanh((((((data[:,21]) + ((((((((data[:,21]) + (((np.where(data[:,26] > -0.186395, np.where(((data[:,13]) * 2.0) > 0.644680, data[:,34], data[:,34] ), ((data[:,27]) * 2.0) )) - (data[:,30]))))/2.0)) * ((5.0)))) + (data[:,5]))))/2.0)) * ((5.0)))) +
            0.500000*np.tanh((((14.78957939147949219)) * (np.where(data[:,28] <= 0.191148, np.where(data[:,27] <= -0.605427, data[:,27], np.where(((data[:,28]) + ((((np.where(data[:,29] <= 0.227700, data[:,2], data[:,29] )) + (data[:,21]))/2.0))) <= 0.227700, data[:,5], data[:,21] ) ), (((((data[:,2]) + (data[:,28]))/2.0)) + (data[:,21])) )))) +
            0.500000*np.tanh(((((((data[:,1]) - (data[:,14]))) + (np.where(((data[:,22]) + (data[:,1])) > 0.451094, (4.65495681762695312), ((data[:,2]) - (((data[:,1]) + (data[:,14])))) )))) + (((((((data[:,7]) * 2.0)) * 2.0)) + (((((data[:,2]) + (data[:,7]))) * 2.0)))))) +
            0.500000*np.tanh(((((((((((np.where(np.where(data[:,0] > 0.372543, data[:,0], data[:,34] ) > -1.667696, ((np.where(data[:,1] > -1.667696, ((data[:,7]) - (data[:,0])), data[:,34] )) * 2.0), data[:,7] )) * 2.0)) - (data[:,31]))) - (data[:,0]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(np.where(data[:,9] > 1.393889, data[:,31], ((((np.where(data[:,31] <= 1.949028, ((((((np.where(data[:,31] <= 1.949028, ((((((data[:,7]) - (data[:,0]))) * 2.0)) * 2.0), data[:,9] )) - (data[:,0]))) * 2.0)) * 2.0), data[:,7] )) - (data[:,31]))) - (data[:,31])) )) +
            0.500000*np.tanh(((((((((data[:,7]) + (data[:,7]))) - (((data[:,0]) + (np.where(data[:,7] > 1.732826, data[:,0], ((data[:,0]) + (((data[:,30]) + (((data[:,34]) * (data[:,9])))))) )))))) * 2.0)) - (data[:,0]))) +
            0.500000*np.tanh(np.where(((data[:,34]) / 2.0) <= -0.605427, np.where(data[:,1] > 0.041261, data[:,1], data[:,34] ), ((((np.where(data[:,12] <= -0.186395, np.where(data[:,10] <= 1.559526, data[:,5], data[:,34] ), data[:,28] )) - (np.where(data[:,1] <= 1.559526, data[:,10], ((data[:,31]) / 2.0) )))) - (data[:,10])) )) +
            0.500000*np.tanh(np.where(np.where(((data[:,9]) - (data[:,0])) > -0.597506, data[:,2], ((((((data[:,9]) - (data[:,0]))) - (data[:,10]))) * 2.0) ) <= 1.323875, ((((((((((data[:,9]) - (data[:,0]))) - (data[:,10]))) * 2.0)) * 2.0)) - (data[:,31])), data[:,0] )) +
            0.500000*np.tanh(((((((((np.where(data[:,2] > 0.663979, data[:,0], ((((((((data[:,7]) + (np.where(data[:,28] > 0.663988, data[:,28], data[:,9] )))) - (data[:,9]))) + (np.where(data[:,12] > -0.597506, data[:,1], data[:,9] )))) - (data[:,0])) )) * 2.0)) * 2.0)) * 2.0)) + (data[:,28]))) +
            0.500000*np.tanh(((((((((((((np.where(data[:,27] <= -0.597506, data[:,26], np.where(np.where(data[:,21] <= -0.186395, data[:,26], data[:,1] ) > 1.508813, (4.04251909255981445), np.where(np.where(data[:,1] <= 2.052433, data[:,1], data[:,26] ) <= -0.186395, data[:,7], data[:,21] ) ) )) - (data[:,0]))) * 2.0)) * 2.0)) * 2.0)) - ((4.04251909255981445)))) * 2.0)) +
            0.500000*np.tanh(((((((((data[:,9]) - (np.where(data[:,31] <= 1.346941, data[:,10], data[:,2] )))) * 2.0)) - (np.where(data[:,11] > 0.167596, data[:,29], np.where(data[:,31] <= 0.980693, data[:,31], np.where(data[:,31] <= 1.346941, data[:,31], data[:,11] ) ) )))) * 2.0)) +
            0.500000*np.tanh(((((((((((((((np.where(data[:,2] <= 0.779899, ((data[:,27]) - (data[:,0])), np.where(data[:,0] <= 0.779899, data[:,2], data[:,31] ) )) * (((data[:,31]) - (data[:,13]))))) - (data[:,0]))) * 2.0)) - (((data[:,31]) - (data[:,13]))))) - (data[:,20]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((np.where(data[:,21] <= 1.949028, ((np.where(data[:,33] <= 1.949028, np.where(data[:,13] <= 0.568808, ((data[:,7]) - (((data[:,0]) - (data[:,21])))), ((((data[:,0]) - (data[:,21]))) - (data[:,21])) ), data[:,1] )) * 2.0), data[:,17] )) * 2.0)) +
            0.500000*np.tanh(((np.where(np.where(((data[:,13]) - (data[:,17])) <= 0.339377, data[:,12], data[:,13] ) > 0.931217, ((((((((data[:,17]) * 2.0)) * 2.0)) * 2.0)) - (data[:,13])), data[:,7] )) - (np.where(data[:,13] <= 0.857023, ((((data[:,0]) * 2.0)) - (data[:,13])), data[:,13] )))) +
            0.500000*np.tanh(((((((((((np.where(data[:,5] <= 0.857023, np.where(data[:,27] > -0.186395, data[:,7], ((data[:,6]) / 2.0) ), data[:,11] )) - (((data[:,12]) * (data[:,27]))))) - (data[:,27]))) - (data[:,5]))) - (((data[:,27]) * (data[:,27]))))) - (((data[:,5]) * (data[:,12]))))) +
            0.500000*np.tanh(((np.where(data[:,29] > -0.144300, ((((np.where(data[:,29] > -0.144300, ((((np.where(data[:,13] > 0.355088, data[:,7], np.where(np.where(data[:,13] > -0.144300, data[:,7], ((data[:,13]) * 2.0) ) <= -1.315124, data[:,13], data[:,21] ) )) * 2.0)) * 2.0), data[:,29] )) - (data[:,32]))) * 2.0), data[:,7] )) - (data[:,32]))) +
            0.500000*np.tanh(((((np.where(np.where(data[:,26] > 1.609704, data[:,7], data[:,5] ) > -0.190301, data[:,5], np.where(data[:,34] > -1.667696, data[:,26], (-1.0*(((4.0)))) ) )) + (np.where(data[:,7] <= -1.667696, data[:,7], np.where(data[:,10] <= -1.667696, data[:,10], data[:,25] ) )))) - (data[:,10]))) +
            0.500000*np.tanh(((((((((np.where(((data[:,16]) * 2.0) <= 0.568808, ((((data[:,9]) * 2.0)) - (data[:,10])), data[:,29] )) - (data[:,0]))) * 2.0)) * 2.0)) + (np.where(data[:,9] <= 0.568808, np.where(((data[:,9]) + (data[:,9])) <= 0.568808, ((data[:,16]) * 2.0), ((data[:,16]) * 2.0) ), data[:,29] )))) +
            0.500000*np.tanh(((((((np.where(data[:,16] > -0.186395, data[:,1], np.where(data[:,9] > 0.744603, (8.0), np.where(data[:,9] > 0.597027, data[:,16], np.where(data[:,16] > -0.186395, data[:,9], data[:,16] ) ) ) )) - (data[:,0]))) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((np.where(data[:,27] <= -0.597506, np.where(data[:,12] <= 0.726425, data[:,27], (2.0) ), np.where(data[:,21] <= -0.597506, data[:,9], np.where((2.0) > 1.732826, np.where(data[:,27] > 0.339038, data[:,17], (2.0) ), data[:,12] ) ) )) - (np.where(data[:,21] <= 0.432894, np.where(data[:,21] <= 0.432894, data[:,4], data[:,17] ), data[:,31] )))) +
            0.500000*np.tanh(np.where(data[:,26] <= 0.726425, ((np.where(data[:,1] <= 0.663988, data[:,7], np.where(data[:,13] <= 0.311449, data[:,21], data[:,26] ) )) - (np.where(data[:,27] <= 0.016296, np.where(data[:,27] <= 0.016296, ((data[:,31]) - (((data[:,27]) - (data[:,0])))), data[:,29] ), data[:,29] ))), ((data[:,0]) - (data[:,27])) )) +
            0.500000*np.tanh(np.where(data[:,16] > 0.958639, data[:,1], ((((np.where(data[:,16] <= 0.206136, data[:,5], data[:,16] )) + (np.where(data[:,11] <= 0.206136, ((np.where(data[:,5] <= 0.206136, ((((data[:,12]) - (data[:,0]))) - (data[:,10])), data[:,15] )) - (((data[:,10]) * 2.0))), data[:,15] )))) + (data[:,16])) )) +
            0.500000*np.tanh(np.where(data[:,34] <= -0.168708, np.where(data[:,17] <= -0.350244, data[:,9], data[:,21] ), np.where(data[:,9] <= 0.597027, np.where(data[:,9] <= 0.597027, ((((((data[:,16]) + (data[:,28]))) + (data[:,16]))) + (data[:,28])), data[:,17] ), (((-1.0*((data[:,16])))) * 2.0) ) )) +
            0.500000*np.tanh(((((np.where(np.where(data[:,7] > -0.103657, data[:,31], data[:,22] ) > 0.602636, data[:,13], data[:,7] )) - (data[:,32]))) - (np.where(data[:,13] <= 0.602636, np.where(data[:,31] <= 1.949028, data[:,0], np.where(data[:,13] > -0.597506, data[:,31], data[:,7] ) ), data[:,13] )))) +
            0.500000*np.tanh(np.where(data[:,29] > 0.169775, np.where(data[:,27] > 0.293758, data[:,31], np.where(np.where(data[:,16] > 1.949028, data[:,11], data[:,16] ) > 1.949028, data[:,11], np.where(data[:,16] <= 0.169775, data[:,27], (9.0) ) ) ), ((np.where(data[:,16] <= 0.169775, data[:,27], ((data[:,28]) - (data[:,16])) )) - (data[:,29])) )) +
            0.500000*np.tanh(((((np.where(((data[:,18]) - (data[:,22])) > 0.362151, data[:,25], data[:,18] )) - (data[:,20]))) - (np.where(data[:,2] > 1.008016, np.where(data[:,18] > 0.362151, data[:,2], np.where(data[:,25] > 0.362151, ((data[:,18]) - (data[:,22])), data[:,18] ) ), data[:,0] )))) +
            0.500000*np.tanh(np.where(data[:,7] <= -0.605427, data[:,7], np.where(data[:,27] <= -0.605427, ((((((data[:,26]) - (data[:,29]))) - (data[:,7]))) - (data[:,7])), ((((np.where(data[:,26] <= 1.008016, ((data[:,6]) - (data[:,26])), data[:,2] )) - (data[:,10]))) - (data[:,10])) ) )) +
            0.500000*np.tanh(((np.where(data[:,20] <= -1.667696, np.where(data[:,7] <= -0.597506, np.where(data[:,20] > -0.597506, data[:,27], data[:,17] ), (2.0) ), data[:,27] )) - (np.where(data[:,27] <= 0.284687, data[:,0], np.where(np.where(data[:,17] <= -0.597506, data[:,7], data[:,27] ) <= 0.685128, (11.21186923980712891), data[:,6] ) )))) +
            0.500000*np.tanh(((np.where(np.where((-1.0*((data[:,13]))) > 0.438894, data[:,13], ((data[:,21]) / 2.0) ) > -0.350244, np.where(data[:,22] > 0.575617, data[:,29], ((data[:,7]) - (data[:,13])) ), np.where(((data[:,7]) - (data[:,29])) > 1.964719, data[:,12], data[:,12] ) )) + (((data[:,21]) / 2.0)))) +
            0.500000*np.tanh(np.where(np.where(data[:,16] > -0.286417, data[:,31], (3.38913273811340332) ) <= 0.935776, data[:,28], ((((((((-1.0*((((((data[:,3]) - (data[:,13]))) - (data[:,9])))))) * 2.0)) * 2.0)) + (np.where(np.where(data[:,9] > -0.286417, data[:,31], (7.0) ) > 1.505845, data[:,31], data[:,16] )))/2.0) )) +
            0.500000*np.tanh(np.where(data[:,33] > 1.862611, np.where(data[:,29] > 0.851518, data[:,29], data[:,34] ), (-1.0*((np.where(np.where(data[:,22] > 0.841530, data[:,16], data[:,29] ) <= -0.597506, data[:,29], np.where(data[:,11] > 0.851518, data[:,29], data[:,34] ) )))) )) +
            0.500000*np.tanh(np.where(data[:,13] <= 0.116560, np.where(data[:,29] > 0.258177, np.where(data[:,21] > 0.258177, data[:,1], data[:,21] ), data[:,34] ), ((((np.where(data[:,22] > -0.350244, np.where(data[:,1] <= -0.350244, data[:,29], ((data[:,22]) - (np.where(data[:,21] > 0.258177, data[:,1], data[:,34] ))) ), data[:,31] )) * 2.0)) * 2.0) )) +
            0.500000*np.tanh(np.where(data[:,2] > 0.189650, data[:,2], np.where(data[:,15] > 0.589957, np.where(data[:,20] > -0.350244, ((((data[:,11]) - (data[:,17]))) - (data[:,12])), data[:,25] ), ((((((data[:,22]) - (data[:,11]))) - (((data[:,24]) - (data[:,12]))))) - (data[:,2])) ) )) +
            0.500000*np.tanh(np.where(data[:,26] > -0.597506, ((np.where(data[:,21] <= -0.275592, np.where(data[:,26] <= 1.208578, np.where(data[:,21] <= 1.208578, np.where(data[:,31] <= 1.208578, data[:,21], (9.0) ), np.where(np.where(data[:,26] <= 1.208578, data[:,21], data[:,33] ) <= 1.208578, data[:,31], data[:,4] ) ), data[:,26] ), data[:,4] )) - (data[:,10])), data[:,33] )) +
            0.500000*np.tanh(np.where(np.tanh((data[:,3])) <= 0.449324, np.where(data[:,19] > 1.258170, data[:,9], np.where(data[:,19] > 1.258170, data[:,28], np.where(data[:,18] > 1.258170, data[:,25], data[:,18] ) ) ), np.where(np.tanh((data[:,3])) <= 0.449324, np.where(data[:,3] > 1.258170, data[:,3], data[:,9] ), data[:,28] ) )) +
            0.500000*np.tanh(np.where(data[:,27] > -1.667696, np.where(data[:,22] > -1.667696, np.where(data[:,7] > -1.667696, np.where(data[:,29] <= -0.771350, np.where(data[:,22] > 1.463885, data[:,9], (9.0) ), np.where(np.where((9.0) <= 0.649640, data[:,7], data[:,22] ) <= 0.649640, data[:,9], ((data[:,7]) * (data[:,11])) ) ), data[:,7] ), data[:,7] ), data[:,27] )) +
            0.500000*np.tanh(np.where(data[:,30] > 1.258170, ((data[:,26]) - (data[:,30])), np.where(data[:,31] > 1.869538, data[:,4], ((((((((((np.where(data[:,26] <= 0.251247, data[:,6], data[:,4] )) - (data[:,10]))) * 2.0)) * 2.0)) * 2.0)) * 2.0) ) )) +
            0.500000*np.tanh(np.where(np.where(np.where(data[:,9] <= 0.432894, data[:,16], data[:,22] ) > 1.157221, data[:,26], data[:,9] ) <= 0.432894, data[:,16], np.where(np.where(data[:,14] > 0.580256, data[:,1], data[:,9] ) <= -0.605427, np.where(data[:,16] <= 0.432894, np.where(data[:,9] <= 0.432894, data[:,26], data[:,22] ), data[:,16] ), (-1.0*((data[:,16]))) ) )) +
            0.500000*np.tanh(np.where(np.where(data[:,16] <= 0.935776, data[:,7], data[:,34] ) <= 0.154556, np.where(data[:,1] > 0.154556, data[:,16], ((np.where(data[:,5] > 0.154556, data[:,34], ((((data[:,5]) + (data[:,34]))) - (data[:,0])) )) - (data[:,0])) ), (-1.0*((((((data[:,5]) + (data[:,34]))) + (data[:,26]))))) )) +
            0.500000*np.tanh(np.where(((data[:,9]) / 2.0) <= -1.187272, data[:,17], np.where(data[:,0] <= -1.187272, (8.16428184509277344), np.where(np.where(data[:,0] > 0.189650, data[:,19], data[:,9] ) <= -0.016059, np.where(data[:,27] <= -0.144300, data[:,28], data[:,28] ), np.where(data[:,27] <= 0.193834, data[:,9], data[:,0] ) ) ) )) +
            0.500000*np.tanh(((np.where(((np.where(data[:,2] > 0.407797, data[:,10], (-1.0*((data[:,17]))) )) - (data[:,27])) > 0.108196, data[:,6], ((((data[:,6]) - (data[:,10]))) - ((-1.0*(((-1.0*((data[:,23])))))))) )) - (data[:,10]))) +
            0.500000*np.tanh(((((np.where(data[:,9] > 0.167596, data[:,16], data[:,9] )) * (((((data[:,0]) - (data[:,9]))) - (data[:,34]))))) + (((data[:,1]) * (np.where(data[:,17] <= 0.453559, ((data[:,10]) + (((data[:,0]) + (data[:,10])))), data[:,16] )))))) +
            0.500000*np.tanh(((np.where(data[:,9] > 1.258170, (-1.0*((np.where(data[:,5] <= 1.333578, data[:,26], data[:,26] )))), np.where(data[:,26] > 1.258170, data[:,29], np.where(data[:,29] <= -0.070749, ((np.where(data[:,34] <= 2.330122, data[:,9], (-1.0*((data[:,34]))) )) - (((data[:,29]) / 2.0))), (-1.0*((data[:,34]))) ) ) )) - (data[:,5]))) +
            0.500000*np.tanh(((((((np.where(np.where((-1.0*((np.where(data[:,9] > 1.478112, np.tanh((np.tanh((data[:,16])))), data[:,16] )))) > 1.478112, np.where(data[:,4] > 1.478112, data[:,16], data[:,16] ), np.tanh((data[:,27])) ) > -0.771350, ((((data[:,4]) - (data[:,9]))) * (data[:,16])), data[:,16] )) * 2.0)) * 2.0)) * 2.0)) +
            0.500000*np.tanh(((((((data[:,0]) * 2.0)) * 2.0)) * (np.where(data[:,29] > 0.310780, ((np.where(data[:,28] <= 0.310780, data[:,13], data[:,27] )) * 2.0), np.where(data[:,29] > 0.597027, np.where(data[:,0] > 0.575617, data[:,28], data[:,29] ), np.where(data[:,13] <= 0.527204, data[:,28], np.where(data[:,13] <= 0.958639, data[:,33], data[:,0] ) ) ) )))) +
            0.500000*np.tanh(np.where(((((((data[:,11]) + (data[:,19]))) + (((data[:,0]) + (data[:,14]))))) - (data[:,12])) > 0.016296, np.where(((data[:,14]) + (data[:,18])) <= 0.258177, data[:,9], (-1.0*((((data[:,0]) + (data[:,18]))))) ), data[:,18] )) +
            0.500000*np.tanh(np.where((-1.0*((data[:,7]))) > 0.478862, np.where((-1.0*((np.where(np.where(data[:,28] <= 1.351329, data[:,9], (-1.0*((data[:,29]))) ) <= 1.351329, data[:,28], data[:,9] )))) > 0.478862, np.where(data[:,9] <= 1.351329, data[:,7], data[:,29] ), (2.61165690422058105) ), np.where(data[:,30] <= 0.015850, data[:,30], (-1.0*((data[:,29]))) ) )) +
            0.500000*np.tanh(np.where(data[:,19] > -0.078052, np.where(np.where(data[:,0] <= 1.415639, np.where(data[:,11] > 0.906706, data[:,1], data[:,13] ), np.where(data[:,0] > 0.906706, data[:,1], data[:,13] ) ) <= 0.287716, ((data[:,1]) * 2.0), data[:,0] ), np.where(np.where(data[:,28] <= -0.186395, data[:,17], data[:,11] ) > -0.597506, data[:,15], data[:,17] ) )) +
            0.500000*np.tanh(np.where(data[:,22] <= 0.431666, ((((np.where(((data[:,29]) - (data[:,10])) > 1.415639, data[:,9], np.where(data[:,9] > 1.415639, data[:,9], (-1.0*((data[:,10]))) ) )) + (data[:,2]))) + (data[:,9])), np.where(data[:,22] > 1.415639, (-1.0*((data[:,22]))), ((data[:,29]) - (data[:,10])) ) )) +
            0.500000*np.tanh(np.where(np.where(data[:,14] > 0.258177, data[:,28], data[:,13] ) <= -0.350244, np.where(data[:,14] > 1.631067, data[:,31], data[:,26] ), np.where(data[:,14] > 0.663988, data[:,13], (-1.0*((np.where(np.where(data[:,14] > 1.631067, np.where(data[:,26] > -0.597506, data[:,14], data[:,14] ), data[:,26] ) > -0.597506, data[:,20], data[:,26] )))) ) )) +
            0.500000*np.tanh(((np.where(np.where(np.where(data[:,26] > 0.290751, (9.29383468627929688), data[:,13] ) <= 1.869538, np.where(data[:,29] <= 1.869538, data[:,14], (9.89608383178710938) ), (9.29383468627929688) ) <= 1.869538, np.where(data[:,5] > 0.931771, (9.0), data[:,26] ), (9.29383468627929688) )) * (((data[:,0]) - (data[:,7]))))) +
            0.500000*np.tanh(np.where(data[:,5] <= 0.841530, np.where(data[:,31] > 0.580355, np.where(data[:,16] <= 0.571425, np.where(((data[:,0]) * 2.0) <= 0.571425, data[:,31], data[:,16] ), data[:,10] ), np.where(data[:,27] > 0.432894, np.where(data[:,16] <= 0.168318, data[:,5], data[:,0] ), data[:,16] ) ), data[:,1] )) +
            0.500000*np.tanh(np.where(np.where(np.where(np.where(data[:,12] > 0.812024, data[:,29], data[:,2] ) > 0.096377, data[:,2], data[:,21] ) > 0.812024, data[:,29], np.where(data[:,21] > 0.869367, np.where(data[:,10] > 0.869367, data[:,29], data[:,2] ), data[:,27] ) ) <= -0.771350, data[:,16], ((data[:,6]) - (data[:,10])) )) +
            0.500000*np.tanh((-1.0*((np.where(np.where(data[:,2] <= 1.084375, np.where(((data[:,13]) / 2.0) <= 1.084375, data[:,3], data[:,13] ), data[:,2] ) <= 0.490982, np.where(data[:,22] <= 0.258177, data[:,23], np.where(data[:,12] <= 0.980693, np.where(data[:,23] <= 1.084375, data[:,3], np.where(data[:,23] <= 1.084375, data[:,26], data[:,26] ) ), data[:,26] ) ), data[:,13] ))))) +
            0.500000*np.tanh(((((((np.where(data[:,18] > 0.232898, np.where(data[:,19] > 0.744603, (-1.0*((data[:,19]))), data[:,7] ), np.where(data[:,7] <= 0.917770, data[:,18], data[:,18] ) )) + (((data[:,18]) * (data[:,15]))))) + ((((-1.0*((data[:,19])))) * (data[:,15]))))) - (data[:,29]))) +
            0.500000*np.tanh(((((np.where(((data[:,0]) - (data[:,7])) > -0.012461, ((data[:,7]) - (data[:,9])), ((data[:,9]) + (((((data[:,1]) + (data[:,27]))) + (data[:,0])))) )) + (((data[:,12]) + (data[:,2]))))) * (((((data[:,0]) - (data[:,27]))) - (data[:,9]))))) +
            0.500000*np.tanh(np.where(data[:,0] > -0.435680, np.where(data[:,9] <= 0.328904, np.where(data[:,7] <= -0.597506, data[:,7], ((data[:,7]) * (data[:,27])) ), np.where(data[:,27] <= 0.328904, data[:,9], (-1.0*((data[:,7]))) ) ), np.where(data[:,27] > 0.328904, np.where(data[:,9] <= 0.328904, data[:,7], data[:,0] ), ((data[:,7]) * (data[:,27])) ) )) +
            0.500000*np.tanh(np.where(data[:,13] > 1.032646, data[:,27], np.where(data[:,1] <= -0.000132, np.where(data[:,13] <= -0.597506, (-1.0*((data[:,28]))), np.where((-1.0*((data[:,27]))) > 0.485123, data[:,17], data[:,28] ) ), np.where((-1.0*((data[:,27]))) <= 1.478112, (-1.0*((np.where(data[:,27] <= 0.258177, data[:,17], data[:,27] )))), data[:,13] ) ) )) +
            0.500000*np.tanh(np.where(data[:,33] <= 1.333578, np.where(((data[:,26]) / 2.0) <= 0.258177, np.where(np.where(np.where(data[:,13] <= 0.836164, np.where(((data[:,17]) / 2.0) <= 0.836164, data[:,13], data[:,26] ), data[:,17] ) > -0.304789, data[:,28], data[:,17] ) <= -0.771350, np.where(data[:,9] <= 0.363309, data[:,17], data[:,33] ), data[:,21] ), data[:,29] ), data[:,29] )) +
            0.500000*np.tanh(np.where(data[:,18] <= 0.432894, (((np.where(data[:,33] > -0.186395, np.where(data[:,19] <= -0.350244, data[:,18], np.where(data[:,19] <= -0.035620, data[:,2], (9.0) ) ), ((data[:,19]) * (np.where(data[:,0] <= 0.602636, data[:,23], data[:,19] ))) )) + (data[:,2]))/2.0), (-1.0*(((((data[:,19]) + (data[:,0]))/2.0)))) )))


# In[3]:


import os
for dirname, _, filenames in os.walk('../input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))


# In[4]:


train = pd.read_csv('../input/nfl-big-data-bowl-2020/train.csv', dtype={'WindSpeed': 'object'})


# In[5]:


outcomes = train[['GameId','PlayId','Yards']].drop_duplicates()


# In[6]:


def strtoseconds(txt):
    txt = txt.split(':')
    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])/60
    return ans

def strtofloat(x):
    try:
        return float(x)
    except:
        return -1

def map_weather(txt):
    ans = 1
    if pd.isna(txt):
        return 0
    if 'partly' in txt:
        ans*=0.5
    if 'climate controlled' in txt or 'indoor' in txt:
        return ans*3
    if 'sunny' in txt or 'sun' in txt:
        return ans*2
    if 'clear' in txt:
        return ans
    if 'cloudy' in txt:
        return -ans
    if 'rain' in txt or 'rainy' in txt:
        return -2*ans
    if 'snow' in txt:
        return -3*ans
    return 0

def OffensePersonnelSplit(x):
    dic = {'DB' : 0, 'DL' : 0, 'LB' : 0, 'OL' : 0, 'QB' : 0, 'RB' : 0, 'TE' : 0, 'WR' : 0}
    for xx in x.split(","):
        xxs = xx.split(" ")
        dic[xxs[-1]] = int(xxs[-2])
    return dic

def DefensePersonnelSplit(x):
    dic = {'DB' : 0, 'DL' : 0, 'LB' : 0, 'OL' : 0}
    for xx in x.split(","):
        xxs = xx.split(" ")
        dic[xxs[-1]] = int(xxs[-2])
    return dic

def orientation_to_cat(x):
    x = np.clip(x, 0, 360 - 1)
    try:
        return str(int(x/15))
    except:
        return "nan"
def preprocess(train):
    ## GameClock
    train['GameClock_sec'] = train['GameClock'].apply(strtoseconds)
    train["GameClock_minute"] = train["GameClock"].apply(lambda x : x.split(":")[0]).astype("object")

    ## Height
    train['PlayerHeight_dense'] = train['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))

    ## Time
    train['TimeHandoff'] = train['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, "%Y-%m-%dT%H:%M:%S.%fZ"))
    train['TimeSnap'] = train['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, "%Y-%m-%dT%H:%M:%S.%fZ"))

    train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)
    train['PlayerBirthDate'] = train['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, "%m/%d/%Y"))

    ## Age
    seconds_in_year = 60*60*24*365.25
    train['PlayerAge'] = train.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()/seconds_in_year, axis=1)
    train["PlayerAge_ob"] = train['PlayerAge'].astype(np.int).astype("object")

    ## WindSpeed
    train['WindSpeed_ob'] = train['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)
    train['WindSpeed_ob'] = train['WindSpeed_ob'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))/2 if not pd.isna(x) and '-' in x else x)
    train['WindSpeed_ob'] = train['WindSpeed_ob'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)
    train['WindSpeed_dense'] = train['WindSpeed_ob'].apply(strtofloat)

    ## Weather
    train['GameWeather_process'] = train['GameWeather'].str.lower()
    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: "indoor" if not pd.isna(x) and "indoor" in x else x)
    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)
    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)
    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('skies', '').replace("mostly", "").strip() if not pd.isna(x) else x)
    train['GameWeather_dense'] = train['GameWeather_process'].apply(map_weather)

    ## Rusher
    train['IsRusher'] = (train['NflId'] == train['NflIdRusher'])
    train['IsRusher_ob'] = (train['NflId'] == train['NflIdRusher']).astype("object")
    temp = train[train["IsRusher"]][["Team", "PlayId"]].rename(columns={"Team":"RusherTeam"})
    train = train.merge(temp, on = "PlayId")
    train["IsRusherTeam"] = train["Team"] == train["RusherTeam"]

    ## dense -> categorical
    train["Quarter_ob"] = train["Quarter"].astype("object")
    train["Down_ob"] = train["Down"].astype("object")
    train["JerseyNumber_ob"] = train["JerseyNumber"].astype("object")
    train["YardLine_ob"] = train["YardLine"].astype("object")
  


    ## Orientation and Dir
    train["Orientation_ob"] = train["Orientation"].apply(lambda x : orientation_to_cat(x)).astype("object")
    train["Dir_ob"] = train["Dir"].apply(lambda x : orientation_to_cat(x)).astype("object")

    train["Orientation_sin"] = train["Orientation"].apply(lambda x : np.sin(x/360 * 2 * np.pi))
    train["Orientation_cos"] = train["Orientation"].apply(lambda x : np.cos(x/360 * 2 * np.pi))
    train["Dir_sin"] = train["Dir"].apply(lambda x : np.sin(x/360 * 2 * np.pi))
    train["Dir_cos"] = train["Dir"].apply(lambda x : np.cos(x/360 * 2 * np.pi))

    ## diff Score
    train["diffScoreBeforePlay"] = train["HomeScoreBeforePlay"] - train["VisitorScoreBeforePlay"]
    train["diffScoreBeforePlay_binary_ob"] = (train["HomeScoreBeforePlay"] > train["VisitorScoreBeforePlay"]).astype("object")

    ## Turf
    Turf = {'Field Turf':'Artificial', 'A-Turf Titan':'Artificial', 'Grass':'Natural', 'UBU Sports Speed S5-M':'Artificial', 'Artificial':'Artificial', 'DD GrassMaster':'Artificial', 'Natural Grass':'Natural', 'UBU Speed Series-S5-M':'Artificial', 'FieldTurf':'Artificial', 'FieldTurf 360':'Artificial', 'Natural grass':'Natural', 'grass':'Natural', 'Natural':'Natural', 'Artifical':'Artificial', 'FieldTurf360':'Artificial', 'Naturall Grass':'Natural', 'Field turf':'Artificial', 'SISGrass':'Artificial', 'Twenty-Four/Seven Turf':'Artificial', 'natural grass':'Natural'} 
    train['Turf'] = train['Turf'].map(Turf)

    ## OffensePersonnel
    temp = train["OffensePersonnel"].iloc[np.arange(0, len(train), 22)].apply(lambda x : pd.Series(OffensePersonnelSplit(x)))
    temp.columns = ["Offense" + c for c in temp.columns]
    temp["PlayId"] = train["PlayId"].iloc[np.arange(0, len(train), 22)]
    train = train.merge(temp, on = "PlayId")

    ## DefensePersonnel
    temp = train["DefensePersonnel"].iloc[np.arange(0, len(train), 22)].apply(lambda x : pd.Series(DefensePersonnelSplit(x)))
    temp.columns = ["Defense" + c for c in temp.columns]
    temp["PlayId"] = train["PlayId"].iloc[np.arange(0, len(train), 22)]
    train = train.merge(temp, on = "PlayId")

    ## sort
#     train = train.sort_values(by = ['X']).sort_values(by = ['Dis']).sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index(drop = True)
    train = train.sort_values(by = ['X']).sort_values(by = ['Dis']).sort_values(by=['PlayId', 'IsRusherTeam', 'IsRusher']).reset_index(drop = True)
    return train


# In[7]:


def create_features(df, deploy=False):
    def new_X(x_coordinate, play_direction):
        if play_direction == 'left':
            return 120.0 - x_coordinate
        else:
            return x_coordinate

    def new_line(rush_team, field_position, yardline):
        if rush_team == field_position:
            # offense starting at X = 0 plus the 10 yard endzone plus the line of scrimmage
            return 10.0 + yardline
        else:
            # half the field plus the yards between midfield and the line of scrimmage
            return 60.0 + (50 - yardline)

    def new_orientation(angle, play_direction):
        if play_direction == 'left':
            new_angle = 360.0 - angle
            if new_angle == 360.0:
                new_angle = 0.0
            return new_angle
        else:
            return angle

    def euclidean_distance(x1,y1,x2,y2):
        x_diff = (x1-x2)**2
        y_diff = (y1-y2)**2

        return np.sqrt(x_diff + y_diff)

    def back_direction(orientation):
        if orientation > 180.0:
            return 1
        else:
            return 0

    def update_yardline(df):
        new_yardline = df[df['NflId'] == df['NflIdRusher']]
        new_yardline['YardLine'] = new_yardline[['PossessionTeam','FieldPosition','YardLine']].apply(lambda x: new_line(x[0],x[1],x[2]), axis=1)
        new_yardline = new_yardline[['GameId','PlayId','YardLine']]

        return new_yardline

    def update_orientation(df, yardline):
        df['X'] = df[['X','PlayDirection']].apply(lambda x: new_X(x[0],x[1]), axis=1)
        df['Orientation'] = df[['Orientation','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)
        df['Dir'] = df[['Dir','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)

        df = df.drop('YardLine', axis=1)
        df = pd.merge(df, yardline, on=['GameId','PlayId'], how='inner')

        return df

    def back_features(df):
        carriers = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','NflIdRusher','X','Y','Orientation','Dir','YardLine']]
        carriers['back_from_scrimmage'] = carriers['YardLine'] - carriers['X']
        carriers['back_oriented_down_field'] = carriers['Orientation'].apply(lambda x: back_direction(x))
        carriers['back_moving_down_field'] = carriers['Dir'].apply(lambda x: back_direction(x))
        carriers = carriers.rename(columns={'X':'back_X',
                                            'Y':'back_Y'})
        carriers = carriers[['GameId','PlayId','NflIdRusher','back_X','back_Y','back_from_scrimmage','back_oriented_down_field','back_moving_down_field']]

        return carriers

    def features_relative_to_back(df, carriers):
        player_distance = df[['GameId','PlayId','NflId','X','Y']]
        player_distance = pd.merge(player_distance, carriers, on=['GameId','PlayId'], how='inner')
        player_distance = player_distance[player_distance['NflId'] != player_distance['NflIdRusher']]
        player_distance['dist_to_back'] = player_distance[['X','Y','back_X','back_Y']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)

        player_distance = player_distance.groupby(['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field'])                                         .agg({'dist_to_back':['min','max','mean','std']})                                         .reset_index()
        player_distance.columns = ['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field',
                                   'min_dist','max_dist','mean_dist','std_dist']

        return player_distance

    def defense_features(df):
        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Team','X','Y']]
        rusher.columns = ['GameId','PlayId','RusherTeam','RusherX','RusherY']

        defense = pd.merge(df,rusher,on=['GameId','PlayId'],how='inner')
        defense = defense[defense['Team'] != defense['RusherTeam']][['GameId','PlayId','X','Y','RusherX','RusherY']]
        defense['def_dist_to_back'] = defense[['X','Y','RusherX','RusherY']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)

        defense = defense.groupby(['GameId','PlayId'])                         .agg({'def_dist_to_back':['min','max','mean','std']})                         .reset_index()
        defense.columns = ['GameId','PlayId','def_min_dist','def_max_dist','def_mean_dist','def_std_dist']

        return defense
    
    def rusher_features(df):
        
        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Dir', 'S', 'A', 'X', 'Y']]
        rusher.columns = ['GameId','PlayId', 'RusherDir', 'RusherS', 'RusherA', 'RusherX', 'RusherY']
        
       
        radian_angle = (90 - rusher['RusherDir']) * np.pi / 180.0
        v_horizontal = np.abs(rusher['RusherS'] * np.cos(radian_angle))
        v_vertical = np.abs(rusher['RusherS'] * np.sin(radian_angle)) 
        
       
        rusher['v_horizontal'] = v_horizontal
        rusher['v_vertical'] = v_vertical
        
        
        rusher.columns = ['GameId','PlayId', 'RusherDir', 'RusherS','RusherA','RusherX', 'RusherY','v_horizontal', 'v_vertical']
        
        
        return rusher

    def static_features(df):
        
        
        add_new_feas = []

        ## Height
        df['PlayerHeight_dense'] = df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))
        
        add_new_feas.append('PlayerHeight_dense')

        ## Time
        df['TimeHandoff'] = df['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, "%Y-%m-%dT%H:%M:%S.%fZ"))
        df['TimeSnap'] = df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, "%Y-%m-%dT%H:%M:%S.%fZ"))

        df['TimeDelta'] = df.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)
        df['PlayerBirthDate'] =df['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, "%m/%d/%Y"))

        ## Age
        seconds_in_year = 60*60*24*365.25
        df['PlayerAge'] = df.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()/seconds_in_year, axis=1)
        add_new_feas.append('PlayerAge')

        ## WindSpeed
        df['WindSpeed_ob'] = df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)
        df['WindSpeed_ob'] = df['WindSpeed_ob'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))/2 if not pd.isna(x) and '-' in x else x)
        df['WindSpeed_ob'] = df['WindSpeed_ob'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)
        df['WindSpeed_dense'] = df['WindSpeed_ob'].apply(strtofloat)
        add_new_feas.append('WindSpeed_dense')

        ## Orientation and Dir
        df["Orientation_ob"] = df["Orientation"].apply(lambda x : orientation_to_cat(x)).astype("object")
        df["Dir_ob"] = df["Dir"].apply(lambda x : orientation_to_cat(x)).astype("object")

        df["Orientation_sin"] = df["Orientation"].apply(lambda x : np.sin(x/360 * 2 * np.pi))
        df["Orientation_cos"] = df["Orientation"].apply(lambda x : np.cos(x/360 * 2 * np.pi))
        df["Dir_sin"] = df["Dir"].apply(lambda x : np.sin(x/360 * 2 * np.pi))
        df["Dir_cos"] = df["Dir"].apply(lambda x : np.cos(x/360 * 2 * np.pi))
        add_new_feas.append("Dir_sin")
        add_new_feas.append("Dir_cos")

        ## diff Score
        df["diffScoreBeforePlay"] = df["HomeScoreBeforePlay"] - df["VisitorScoreBeforePlay"]
        add_new_feas.append("diffScoreBeforePlay")
    
    
        static_features = df[df['NflId'] == df['NflIdRusher']][add_new_feas+['GameId','PlayId','X','Y','S','A','Dis','Orientation','Dir',
                                                            'YardLine','Quarter','Down','Distance','DefendersInTheBox']].drop_duplicates()

        static_features.fillna(-999,inplace=True)
       

        return static_features


    def combine_features(relative_to_back, defense,rushing, static, deploy=deploy):
        df = pd.merge(relative_to_back,defense,on=['GameId','PlayId'],how='inner')
        df = pd.merge(df,rushing,on=['GameId','PlayId'],how='inner')
        df = pd.merge(df,static,on=['GameId','PlayId'],how='inner')

        if not deploy:
            df = pd.merge(df, outcomes, on=['GameId','PlayId'], how='inner')

        return df
    
    yardline = update_yardline(df)
    df = update_orientation(df, yardline)
    back_feats = back_features(df)
    rel_back = features_relative_to_back(df, back_feats)
    def_feats = defense_features(df)
    rush_feats = rusher_features(df)
    static_feats = static_features(df)
    basetable = combine_features(rel_back, def_feats,rush_feats,static_feats, deploy=deploy)
    
    return basetable


# In[8]:


train.head()


# In[9]:


get_ipython().run_line_magic('time', 'train_basetable = create_features(train, False)')


# In[10]:


train_basetable.head()


# In[11]:


ss = StandardScaler()
train_basetable[train_basetable.columns[2:-1]] = ss.fit_transform(train_basetable[train_basetable.columns[2:-1]])


# In[12]:


train_basetable.head()


# In[13]:


cm = plt.cm.get_cmap('RdYlBu')
fig, axes = plt.subplots(1, 1, figsize=(15, 15))
sc = axes.scatter(GPClusterI(train_basetable[train_basetable.columns[2:-1]].values),
                  GPClusterII(train_basetable[train_basetable.columns[2:-1]].values),
                  alpha=1,
                  c=np.sign(train_basetable.Yards)*np.log1p(np.abs(train_basetable.Yards)),
                  cmap=cm,
                  s=10)
cbar = fig.colorbar(sc, ax=axes)
cbar.set_label('Target')
_ = axes.set_title("Clustering colored by target")

